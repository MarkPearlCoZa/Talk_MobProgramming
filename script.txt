Hi everyone, my name is Mark Pearl, I'm excited to be here to share the experiences I've had over the last two years with Mob Programming with you.

So my experience Mob Programming starts in early 2015 when I travelled to the US to speak at a conference. Something I like to do when I travel is 'Team Tourism' - basically the idea behind Team Tourism is to spend time with a team other than your own to see how they work. From my experience there are teams spread across the world that are doing amazing things. If we invest just a little bit of our time in visiting these teams them we can learn amazing things that we can use in our own teams.

Now, in this instance I was lucky enough to go to a company called PluralSight. I was expecting at PluralSight to spend the day pair programming, instead when I arrived I was told that the team I was going to be with didn't pair - they mobbed. At the time I had no clue what mobbing meant - but I was up for anything. That day I had such an amazing time with Mob Programming that by the end of it I was hooked. Since then I have used some variant of Mob Programming in all the teams I've been in.

Today I want to spend a few minutes on what Mob Programming is and how we do it; with the remainder of the time spread on some of the common questions we get about Mob Programming as well as the things we've observed happen when we do it.

So how many of you here have done Mob Programming before? 

{If someone} - Wonderful, I would love to catch up with you after the session to find out your experiences.
{If nobody} - Well this is exciting to have a new group.

I'm going to start off with a quote that Woody Zuil uses when he speak about Mob Programming:

> The value of another's experience is to give us hope, not to tell us how or whether to proceeed - Peter Block.

This is really important - I'm not hear to tell you that you need to do Mob Programming or how you should do it. I'm hear in the hope that in sharing my experiences with you it will inspire you to try something in your own team. 

---------------------------------------------------------------------------------------------------------------------------------

# What is Mob Programming

So with that said, let's tackle what Mob Programming is. 

Mob Programming is when three or more people work together to solve a problem at the same computer.

It is a practice that companies all over the world are adopting. 

As I've learn't more about the practice I've discovered that teams all over the world are doing Mob Programming. 

{Show mobbing around the world slides}

---------------------------------------------------------------------------------------------------------------------------------

# What does Mob Programming look like

So what does Mob Programming look like?

Well, it's a thing in the Mob Programming community for people to do a time lapse video of them mobbing - and it just so happens I did one of my previous team mobbing for a day.

So here we are just after our stand up, what you don't see in this video is that we have a large 60" screen in front of us with a smaller monitor on the left with a clock counting down ten minutes. As we work there is in general between 3 & 5 of us at the mobbing station at any one time with 1 person at the keyboard. Whenever the timer reaches zero the keyboard is rotated to another person in the mob. 

We keep a range of keyboards available so that when it is your turn to be the typist, you are comfortable typing.

Our work area allows people to visit, in this case a developer from another team passes by to say hello, happens to see what we are working on, and then later comes back with some info that we didn't know.

You will also see us use a whiteboard to make notes on. We put things we want to come back to, or conversations we want to put on hold.

In our layout our product owner would sit right next to the mob so that if we needed any information he was on call.

Generally we would all take lunch at the same time. 

People leave as they have meetings or phone calls to make and them pretty much seamlessly re-join the mob. 

What we have learn't is that if someone leaves the mob, the best way for them to catch up when they re-join is not to ask what happened while they were gone. Instead it's way more effective if they become the typist next. This falls into the roles we have in mob programming - something I will talk about shortly.

So I think you have have enough of an idea of what Mob Programming looks like in the wild. Notice that the most important thing was worked on the whole day moving closer and closer to completion. Also it is very active - and while a video does not convey this, by the end everybody in that mob was exhausted.

---------------------------------------------------------------------------------------------------------------------------------

# What are the roles in mob programming

Now that you have seen a typical Mob Programming session, I want to talk about the roles in Mob Programming. In Mob Programming we have two main roles:

1. The typist
2. The rest of the mob

--------------------------

## The typist

As the typist, all you need to be able to do is:

* Press keys
* Trust the mob  
* Become comfortable working with an incomplete understanding  

Pressing keys on a keyboard is easy and requires little explanation. Trusting the mob and working with an incomplete understanding requires a little more explanation.

### Trust the mob

When you are the typist, trust that the rest of the mob knows what they are telling you. If you don't understand **WHAT** they are asking you to do, ask for clarification on what the next step is. If you don't understand **WHY** they are telling you something don't worry about it until you've finished the method or section of code. The right time to discuss and challenge design decisions is after the code is out of their heads and in the editor.

### Become comfortable working with an incomplete understanding

Even if you trust the mob, members of the mob might not be comfortable communicating to you in this style. They might try and explain everything they have done up till then to you before they start giving you useful directions - this slows things down, and depending on your knowledge of the system, can take hours or even days. 

Rather than getting a complete understanding before you start work, encourage the mob to start solving the problem at hand - you will gain context as you type. You do not need a complete understand to be an effective typist. 

### What if you have an idea you want to implement

You have an idea you think is worth implementing - Great! Let the mob know, ask if someone can take your place as typist while you communicate the idea. The person taking the keyboard becomes the typist and you become part of the rest of the mob.  

--------------------------

## The rest of the mob

As someone who is not the typist but still part of the mob you have two main jobs:

1) Help contribute to discovering what the next logical step is to solving the problem  
2) When directing the typist, talk in the highest level of abstraction the typist can understand  

### Discovering what the next logical step is to solving the problem

As part of the rest of the mob, essentially you are part of the problem solving team. It's your job to look for things the typist still needs to do. 
The key is that while you may see many angles and approaches as a mob, you should be helping the typist to only focus on one thing.

One of the challenges many teams new to Mob Programming face is working in close contact with the same people all day, every day. For you to be able to do this for any extended period of time you need to figure out a protocol or some way to work. There are many different protocols to do this, I find the protocol that 'chief' discoverer of Mob Programming has is the most effective. And it goes like this... 

> You should always treat people with Kindness, Consideration & Respect > Woody Zuil

If we are going to get stuff done, we need to interact well. We have got to figure out how to do that and it's a challenge because we are all different. I've found that if you treat someone with Kindness, Consideration & Respect it makes it a lot easier for people to work together.

Now all three of these attributes are important but I would like to spend a bit of time on the attribute of consideration. Consideration is about considering the other person's point of view - it means we have to really focus on listening. And while it is extremely effective once you have the hang of it, sometimes getting started can prove to be a challenging because we are not used to working this way.

### Talk at the highest level of abstraction the typist can understand

Another very important part this role is that when directing the typist you should talk at the highest level of abstraction that the typist is able to understand at that moment. Depending on how long the typist has been with the mob, how in sync they are with what the mob is wanting them to do, and what their skill level is, the level of abstraction may change. 

Finding the appropriate level of abstraction is part of the challenge of Mob Programming. When a mob is just starting out it typically uses lower levels of abstraction to direct the typist, once a mob begins to get its flow you will find higher levels of abstraction are used. 

At its essence what you are trying to do is communicate in a meaningful way. Don't speak above the rest of the mobs understanding, and keep trying to increase the level of communication and understanding. 

---------------------------------------------------------------------------------------------------------------------------------

So now that I've explained the two roles in Mob Programming let's talk about why a team would want to work this way. And for this I'm going to need some audience participation. 

What are some of the benefits you can think of that a team would get from working this way?

{ Field questions from the audience }

These are all great idea's - I've put together my own list of things I've found happened when we worked this way.

---------------------------------------------------------------------------------------------------------------------------------



# Turning up the good

We often focus on the bad stuff. But if we focus on the good stuff and how to turn that up, there is a great advantage to that. Extreme Programming talks about that. In one of Kent Becks books he speaks about what happens when we turn the good up. And that is what we see with Mob Programming. What are the good things that we can make better.


# Roles in Mob Programming

Now I want to speak about a practice we use. We have two roles in Mob Programming. We have the typist and everyone else. The role of the typists is to type and to listen. 

> For an idea to go from someones head into the computer it must go through someone else's hands - Llewellyn Falco

So let's see how this works. We have a keyboard which is a dumb input device. It is how we put letters into the computer. Then we have the concept of the typist - the person putting something into the computer. Everyone else is the rest of the mob. The typist is rotated amongst the mob - it's a role. I've experimented with rotation cycles, I find ten minutes works best.

# No merge problems

We have almost no merge problems, because we are working on one thing at a time - it's a natural one piece flow if I use lean terminology.

# Productivity

How can you be productive with 5 people at 1 computer? Now the first thing I ask a manager is how can you be productive sitting in a meeting with 5 people, which they do all the time. Now I'm a manager, so I understand this stuff - we want to know how productive people can be. Now initially I didn't know how we could be productive - I just knew we were. After doing this for almost two years I have a few ideas. It comes fundamentally to what programming is - what is programming?

Is it typing?
Ultimately it is thinking. Programming is about the code you didn't write.
Can you really measure things this way? I can sense this is a lot better if you keep the entire lifecycle of development in mind.
Some people have attempted to keep records, Martin has shared some work

The amount of work getting done isn't a useful measure if you are not working on useful things. 
If we measure productivity on code being written, 
I believe that most of the important things are difficult to measure and so we pick easier things to measure, and those things become valuable and we thinko

> Because a manager cannot measure the things they want, they start wanting the things they can measure - Russel Ackoff

That's dysfunctional in my opinion.

> Transformation becomes  more from pursuing profound questions than seeking profound answers.

# What are the things that destroy productivity for software developers

- Communication Problems
- Decision making problems - I put off making a decision, rope in my boss to sign off on something, and rope in their boss to make a decision to make sure if something goes wrong I'm not accountable for it. And once we make decisions we have to defend them. 
- Doing more than is barely sufficient
- Technical debt & cruft etc
- Thrashing - this is the idea of context switching, having to continually switch between items
- Meetings
- Distractions
- Multi tasking
- Procrastination
- Lack of information
- Lack of understanding
- Waiting / being blocked
- Multi tasking
- Distributed knowledge
- Deadlines
- Politics

I'm going to cover two of these things in detail. What we noticed is a lot of these things faded away. We didn't look to remove these problems, but they were side effects of how we worked.

## Working well as a team

If you have ever played sports and are working in a team, you set everyone else up for success.

## Communication Problems

I am going to cover one aspect of communication problems that I have to limit it to just one. 

### Question Que Time

You have a piece of work which is waiting to be worked on. It's the waiting time that we are talking about. This is the amount of time that we must wait to get an answer to a question that is blocking us. While we wait we have to context switch to someonething else while we are waiting. 

<Value stream map>

We can map anything against the value part. 

So what's the ideal queue time? Zero, none - we have a green bar going across the time. 
What if we had a two minute wait, you are going to loose about 15 minutes a day.
What if we have a ten minute wait, 
What if we have a one hour wait

How do we typically solve this? If we have something blocked what do we do? We multi task - so now what do we see, we see this beautiful bar of always being ready but we are hiding the red bar of not being able to progress. This is the thing, we are dealing with a symptom - the problem is we are not getting answers to our questions in a timely manner. So we are baiscally trying to solve a queing problem but we are introducing an inventory problem. 

> Stop starting, and start finishing

So how do we solve this? I don't know, we didn't solve it - it faded away. We seemed to have fewer blocking questions. In Mob Programming we are there to answer our questions all the time. We have a zero queue time.

Something funny with Mob Programming was if our product owners stayed close to us, they would get their work really quickly. 

Work in progress goes to one

This is an automatic one piece flow. Work in progress naturally goes to one. I've been chasing work in progress limits all the time. When we started Mob Programming wip gravitated to one.

## Technical Debt

So I want to talk about Technical Debt, and again there are too many technical debt things to talk about so I'm going to pick one thing. We have three similar problems, and three developers take them on individually. What happens - you get three different solutions to the problem. It's hard to see a pattern if you don't see more than one of something. You have to see a number of them.

Technical Debt Free - when a story comes in we take them one at a time, and the whole team sees it - we scrutinize it. When I write code alone, the very best of what I do and the very worst of what I do get's into the code. When I work as a Mob, the very best of what I do get's in the code, and the very worst of what I doesn't. We can smell out the bad stuff. 

We identifiy patterns easier - because someone will recognize the pattern, we identify DRY. The code get's cleaner. We have the technical debt version, and the technical debt free version. 

Bugs decrease rapidly. It's a very high quality way of working.

When a bug report comes in, and you have 3 different solutions, often the bug only get's sorted in one of the solutions - the other two bugs remain undetected. 
When we have a cleaner pattern and a bug comes in, we apply it to all three things.

# Meetings

The funny thing about meetings is we share information we have, we make decisions, assign some work and then everyone goes on their own. We got aligned for a minute and then everyone get's disalinged. So people will look at Mob Programming and say, that's just a meeting - it's a working meeting.

# Environment of Continous Learning

Continous learning happens at some many levels. You are learning shortcuts, you are learning language things, you are learning about the business. There are many many advantages to this. The knowledge get's shared across.

# Exposed 

A warning, you will feel exposed with this type of work. If you cannot feel comfortable with someone else in front of the keyboard you cannot do that. It will be a problem for some people. You have tobe able to work this way.

# Pay attention to ergonomics

# Relaxed & sustainable

Be sure things stay relaxed and sustainable. If we don't feel we cannot contribute, settle back. We don't need to be the one contributing.

# What's the ideal number?

I've found 4-5 people in our current mob works well.

# Do I recommend Mob Programming

Absolutely, I would love to see people doing more of this. 

# Isn't this an expensive way of creating software

# If we are not able to answer our own questions, then we are missing someone

# Get through the work rapidly

# Challenges we face

## Is this a slow way of developing software

# Pay attention to what works and turn up the good

If something is working well, then turn it up.

## Space is an issue

- our work environment does not cater for the space we need to mob. We need more of an open space with a larger table. I've noticed that in our current mob as we hit 4 people things start to become cramped. This was not an issue with my previous mob where we could comfortably mob with 5 people.

## I want to work with others on my own terms

That's selfish - do you email people - that's communication.

## References

- [Real life mobbing](http://blog.crisp.se/2015/12/28/yassalsundman/real-life-mob-programming)  
- [something](http://benjiweber.co.uk/blog/2015/04/17/modern-extreme-programming/)  
- [something else](http://workingsoftware.co.uk/2015/12/17/give-mob-programming-a-go/)  
- [something else again](http://codecoupled.org/2015/10/12/journeyman-twingly/)
