Hi everyone, my name is Mark Pearl, I'm excited to be here to share the experiences I've had over the last two years with Mob Programming with you.

So my experience Mob Programming starts in early 2015 when I travelled to the US to speak at a conference. Something I like to do when I travel is 'Team Tourism' - basically the idea behind Team Tourism is to spend time with a team other than your own to see how they work. From my experience there are teams spread across the world that are doing amazing things. If we invest just a little bit of our time in visiting these teams them we can learn amazing things that we can use in our own teams.

Now, in this instance I was lucky enough to go to a company called PluralSight. I was expecting at PluralSight to spend the day pair programming, instead when I arrived I was told that the team I was going to be with didn't pair - they mobbed. At the time I had no clue what mobbing meant - but I was up for anything. That day I had such an amazing time with Mob Programming that by the end of it I was hooked. Since then I have used some variant of Mob Programming in all the teams I've been in.

Today I want to spend a few minutes on what Mob Programming is and how we do it; and then I'm going to spend the remainder of the time on some of the common questions we get about Mob Programming as well as the things we've observed happen when we do it.

How many of you here have done Mob Programming before? Wonderful, I would love to catch up with you after the session to find out your experiences.

I'm going to start off this session with a quote I stole from a similar talk that Woody did on Mom Programming.

> The value of another's experience is to give us hope, not to tell us how or whether to proceeed - Peter Block.

This is really important - I'm not hear to tell you that you need to do Mob Programming or how you should do it. My hope is that in sharing my experiences with you, it will inspire you to try something in your own team. This is also not the defacto way of doing Mob Programming - there are many other ways of doing it, this is just what we have done. 

---------------------------------------------------------------------------------------------------------------------------------

# What is Mob Programming

So with that said, let's tackle what Mob Programming is. 

Mob Programming is when three or more people work together to solve a problem at the same computer.

It is a really effective practice that companies all over the world are adopting. 

---------------------------------------------------------------------------------------------------------------------------------

# What does Mob Programming look like

So what does Mob Programming look like?

Well, it just so happens that it's a thing in the Mob Programming world for people to do a time lapse videos of them mobbing - and it just so happens I did one of my previous team of us mobbing for a day.

So here we are, what you don't see in this video is that we have a large 60" screen in front of us with a smaller monitor on the left with a clock counting down on ten minutes. As we work there is on general between 3 & 5 of us at the mobbing station at any one time with one person at the keyboard. 

The keyboard is rotated reguarly amongst us as the timer reaches zero. You will also see us use a whiteboard to make notes on. 

In our layout our product owner would sit right next to the mob so that if we needed any information he was on call.

Generally we would all take lunch at the same time. 

People leave as they have meetings or phone calls to make and them pretty much seamlessly re-join the mob. 

And most importantly the thing being mobbed on is moving closer and closer to completion.

So I think you have have enough of an idea of what Mob Programming looks like in the wild. 

It is very active - by the end of the day you are exhausted.

---------------------------------------------------------------------------------------------------------------------------------

So, I would like to ask you the question: "Why would we work this way"?

[Possible Answers]

- Better quality  
- Instant review of both the design and the code
- Faster learning - it's a very accelerated learning environment
- Team resiliency - that's a good point, if someone is sick today, we don't have to wait for them, and if someone is new, we can have them productive from day one

---------------------------------------------------------------------------------------------------------------------------------

# Common questions we get about Mob Programming 


# How can we work this way?

Initially it was great, but if you are working with the same people all day, every day in close contact you have to get some mechanisms to work this way for an extended period of time. You have to figure out a protocol or some way to work. And there are many of them out there. 



We value individuals and interactions, pretty much over everyone else. If we are going to get stuff done, we need to interact well. We have got to figure out how to do that. We are all different. I've found that if you treat someone with Kindness, Consideration & Respect it makes it a lot easier for people to work together.

Now I would like to talk a bit about consideration. Consideration is about considering the other person's point of view. We have to really focus on listening.

And while it is extremely effective once you have the hang of it, sometimes getting started can prove to be a challenging mainly because people are not used to working this way.


# Turning up the good

We often focus on the bad stuff. But if we focus on the good stuff and how to turn that up, there is a great advantage to that. Extreme Programming talks about that. In one of Kent Becks books he speaks about what happens when we turn the good up. And that is what we see with Mob Programming. What are the good things that we can make better.

# Collaboration

> The object isn't to make art, it's to be in that wonderful state which makes art inevitable - Robert Henri

The concept of this is about providing an environment where people can excel in their work. And if you provide that environment, people will figure out how to make things wonderful if you allow that to happen.


# Roles in Mob Programming

Now I want to speak about a practice we use. We have two roles in Mob Programming. We have the typist and everyone else. The role of the typists is to type and to listen. 

> For an idea to go from someones head into the computer it must go through someone else's hands - Llewellyn Falco

So let's see how this works. We have a keyboard which is a dumb input device. It is how we put letters into the computer. Then we have the concept of the typist - the person putting something into the computer. Everyone else is the rest of the mob. The typist is rotated amongst the mob - it's a role. I've experimented with rotation cycles, I find ten minutes works best.

# No merge problems

We have almost no merge problems, because we are working on one thing at a time - it's a natural one piece flow if I use lean terminology.

# Productivity

How can you be productive with 5 people at 1 computer? Now the first thing I ask a manager is how can you be productive sitting in a meeting with 5 people, which they do all the time. Now I'm a manager, so I understand this stuff - we want to know how productive people can be. Now initially I didn't know how we could be productive - I just knew we were. After doing this for almost two years I have a few ideas. It comes fundamentally to what programming is - what is programming?

Is it typing?
Ultimately it is thinking. Programming is about the code you didn't write.
Can you really measure things this way? I can sense this is a lot better if you keep the entire lifecycle of development in mind.
Some people have attempted to keep records, Martin has shared some work

The amount of work getting done isn't a useful measure if you are not working on useful things. 
If we measure productivity on code being written, 
I believe that most of the important things are difficult to measure and so we pick easier things to measure, and those things become valuable and we thinko

> Because a manager cannot measure the things they want, they start wanting the things they can measure - Russel Ackoff

That's dysfunctional in my opinion.

> Transformation becomes  more from pursuing profound questions than seeking profound answers.

# What are the things that destroy productivity for software developers

- Communication Problems
- Decision making problems - I put off making a decision, rope in my boss to sign off on something, and rope in their boss to make a decision to make sure if something goes wrong I'm not accountable for it. And once we make decisions we have to defend them. 
- Doing more than is barely sufficient
- Technical debt & cruft etc
- Thrashing - this is the idea of context switching, having to continually switch between items
- Meetings
- Distractions
- Multi tasking
- Procrastination
- Lack of information
- Lack of understanding
- Waiting / being blocked
- Multi tasking
- Distributed knowledge
- Deadlines
- Politics

I'm going to cover two of these things in detail. What we noticed is a lot of these things faded away. We didn't look to remove these problems, but they were side effects of how we worked.

## Working well as a team

If you have ever played sports and are working in a team, you set everyone else up for success.

## Communication Problems

I am going to cover one aspect of communication problems that I have to limit it to just one. 

### Question Que Time

You have a piece of work which is waiting to be worked on. It's the waiting time that we are talking about. This is the amount of time that we must wait to get an answer to a question that is blocking us. While we wait we have to context switch to someonething else while we are waiting. 

<Value stream map>

We can map anything against the value part. 

So what's the ideal queue time? Zero, none - we have a green bar going across the time. 
What if we had a two minute wait, you are going to loose about 15 minutes a day.
What if we have a ten minute wait, 
What if we have a one hour wait

How do we typically solve this? If we have something blocked what do we do? We multi task - so now what do we see, we see this beautiful bar of always being ready but we are hiding the red bar of not being able to progress. This is the thing, we are dealing with a symptom - the problem is we are not getting answers to our questions in a timely manner. So we are baiscally trying to solve a queing problem but we are introducing an inventory problem. 

> Stop starting, and start finishing

So how do we solve this? I don't know, we didn't solve it - it faded away. We seemed to have fewer blocking questions. In Mob Programming we are there to answer our questions all the time. We have a zero queue time.

Something funny with Mob Programming was if our product owners stayed close to us, they would get their work really quickly. 

Work in progress goes to one

This is an automatic one piece flow. Work in progress naturally goes to one. I've been chasing work in progress limits all the time. When we started Mob Programming wip gravitated to one.

## Technical Debt

So I want to talk about Technical Debt, and again there are too many technical debt things to talk about so I'm going to pick one thing. We have three similar problems, and three developers take them on individually. What happens - you get three different solutions to the problem. It's hard to see a pattern if you don't see more than one of something. You have to see a number of them.

Technical Debt Free - when a story comes in we take them one at a time, and the whole team sees it - we scrutinize it. When I write code alone, the very best of what I do and the very worst of what I do get's into the code. When I work as a Mob, the very best of what I do get's in the code, and the very worst of what I doesn't. We can smell out the bad stuff. 

We identifiy patterns easier - because someone will recognize the pattern, we identify DRY. The code get's cleaner. We have the technical debt version, and the technical debt free version. 

Bugs decrease rapidly. It's a very high quality way of working.

When a bug report comes in, and you have 3 different solutions, often the bug only get's sorted in one of the solutions - the other two bugs remain undetected. 
When we have a cleaner pattern and a bug comes in, we apply it to all three things.

# Meetings

The funny thing about meetings is we share information we have, we make decisions, assign some work and then everyone goes on their own. We got aligned for a minute and then everyone get's disalinged. So people will look at Mob Programming and say, that's just a meeting - it's a working meeting.

# Environment of Continous Learning

Continous learning happens at some many levels. You are learning shortcuts, you are learning language things, you are learning about the business. There are many many advantages to this. The knowledge get's shared across.

# Exposed 

A warning, you will feel exposed with this type of work. If you cannot feel comfortable with someone else in front of the keyboard you cannot do that. It will be a problem for some people. You have tobe able to work this way.

# Pay attention to ergonomics

# Relaxed & sustainable

Be sure things stay relaxed and sustainable. If we don't feel we cannot contribute, settle back. We don't need to be the one contributing.

# What's the ideal number?

I've found 4-5 people in our current mob works well.

# Do I recommend Mob Programming

Absolutely, I would love to see people doing more of this. 

# Isn't this an expensive way of creating software

# If we are not able to answer our own questions, then we are missing someone

# Get through the work rapidly

# Challenges we face

## Is this a slow way of developing software

# Pay attention to what works and turn up the good

If something is working well, then turn it up.

## Space is an issue

- our work environment does not cater for the space we need to mob. We need more of an open space with a larger table. I've noticed that in our current mob as we hit 4 people things start to become cramped. This was not an issue with my previous mob where we could comfortably mob with 5 people.

## I want to work with others on my own terms

That's selfish - do you email people - that's communication.

## References

- [Real life mobbing](http://blog.crisp.se/2015/12/28/yassalsundman/real-life-mob-programming)  
- [something](http://benjiweber.co.uk/blog/2015/04/17/modern-extreme-programming/)  
- [something else](http://workingsoftware.co.uk/2015/12/17/give-mob-programming-a-go/)  
- [something else again](http://codecoupled.org/2015/10/12/journeyman-twingly/)
